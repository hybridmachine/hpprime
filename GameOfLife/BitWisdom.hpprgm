// Test program to work out using bit masking to implement the game of life program
EXPORT BitWisdom()
BEGIN
  PRINT();
  LOCAL TestList, Idx, NbrCnt, Bit;

  TestList  := {#0000000000000000b,
                #0000000000000000b,
                #0000000110000000b,
                #0000001100000000b,
                #0000000100000000b,
                #0000000000000000b,
                #0000000000000000b};
    
    FOR Idx FROM 2 TO (SIZE(TestList) - 1) DO
        LOCAL Row,RowAbove,RowBelow;
        
        RowAbove := TestList(Idx-1);
        Row := TestList(Idx);
        RowBelow := TestList(Idx+1);
        
        WHILE ((Row > 0) OR (RowAbove > 0) OR (RowBelow > 0)) DO
            NbrCnt := 0;
            IF (BITAND(Row, #010b) == #010b) THEN
            // Check if bit stays on
            LOCAL Above,Here,Below;
            Above := BITAND(RowAbove, #111b);
            Here := BITAND(Row, #101b); // Don't count the actual bit being checked
            Below := BITAND(RowBelow, #111b);

            FOR Bit FROM 1 TO 3 DO
                NbrCnt := NbrCnt + BITAND(Above, #001b) + BITAND(Here, #001b) + BITAND(Below, #001b);
                BITSR(Above);
                BITSR(Here);
                BITSR(Below);
            END;
            
            IF 2 <= NbrCnt <= 3 THEN
                PRINT ("BIT " + Idx + " LIVES");
            ELSE
                PRINT ("BIT " + Idx + " DIES");
            END
            ELSE
            // Check if bit turns on
            END; 
            PRINT("Row " + Idx + " is " + Row);
            
            RowAbove := BITSR(RowAbove);
            Row := BITSR(Row);
            RowBelow := BITSR(RowBelow);
        END; // While
    END; // For
END; // Begin