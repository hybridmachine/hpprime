// HP Prime program to render John Conway's Game of Life on the screen
// In this first revision, always starts with an R-Pentomino

// SIZE X SIZE matrix of current generation 
// (this is the generation visible on the screen)
EXPORT CurrentGen;

// SIZE x SIZE matrix of next generation. Once computed
// becomes the current generation and then is zeroed out
EXPORT NextGen;

// Copy the pattern matrix into the initial generation
LoadStartingPattern(PatternMatrix)
BEGIN
   LOCAL MatSize, MidX, MidY, xPos, yPos;
   LOCAL PatSize;

   MatSize := SIZE(CurrentGen);
   PatSize := SIZE(PatternMatrix);

  MidX := CEILING(MatSize(2)/2 - PatSize(2)/2); // Middle of columns
  MidY := CEILING(MatSize(1)/2 - PatSize(1)/2); // Middle of rows
  
   FOR xPos  FROM 1 TO PatSize(2) DO
       FOR yPos FROM 1 TO PatSize(1) DO
          CurrentGen(MidY + yPos, MidX + xPos) := PatternMatrix(yPos, xPos);
       END;
   END;

   Return(0);
END;

// Load the r pentomino in the middle of the matrix
// Assumes matrix is set to 0's
LoadRPentomino()
BEGIN
  LOCAL PatternMatrix;
  PatternMatrix := [[0,1,1],
                    [1,1,0],
                    [0,1,0]];
  LoadStartingPattern(PatternMatrix);

  RETURN(0);
END;

// Load a glider pattern
LoadGlider()
BEGIN
  LOCAL PatternMatrix;
  PatternMatrix := [[0,1,0],
                    [0,0,1],
                    [1,1,1]];
  LoadStartingPattern(PatternMatrix);

  RETURN(0);
END;

// Load a glider pattern
LoadGliderBlockCycle()
BEGIN
  LOCAL PatternMatrix;
  PatternMatrix := [[0,0,0,1,1,0,0,0],
                    [0,0,0,1,1,0,0,0],
                    [0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0],
                    [0,0,1,0,0,1,0,0],
                    [1,0,1,0,0,1,0,1],
                    [0,1,1,0,0,1,1,0]];
  LoadStartingPattern(PatternMatrix);
  RETURN(0);
END;

// Render the pixel matrix on the screen as a grid of squares
RenderMatrix()
BEGIN
    LOCAL MatSize, BoardX, BoardY, RenderX, RenderY, edgecolor, fillcolor; 

    LOCAL BlankCheckSum, SubMatrixOpt;

    MatSize := SIZE(CurrentGen);
    HAngle:=0; AAngle:=0; // set current angle mode
     Xmin:= 0;  Xmax:= MatSize(2)+1;  Ymin:=0;  Ymax:=MatSize(1)+1; //set default Cartesian window values
     RECT(G1); //clear screen
    //SUBGROB(G0, G1);  // Copy the clear to G1
     edgecolor := RGB(255,0,255);
     fillcolor := RGB(255,0,0);
     FOR BoardX FROM 1 TO MatSize(2) DO
        // Scan for a blank group of columns and skip them (optimization to speed up generation calculation, if they are all blank, they will stay blank)
        SubMatrixOpt  := CurrentGen({{1,BoardX},{MatSize(1),BoardX}});
        BlankCheckSum := ΣLIST(SubMatrixOpt);

        IF BlankCheckSum == 0 THEN
            CONTINUE;
        END;
        RenderX := BoardX;
        FOR BoardY FROM 1 TO MatSize(1) DO
            RenderY := Ymax - BoardY;
            IF CurrentGen(BoardY, BoardX) == 1 THEN
                  RECT(G1, RenderX - 1, RenderY - 1, RenderX, RenderY, edgecolor, fillcolor);
           END;
        END;
     END;
     BLIT(G0,G1);
END;

// Implementation of John Conway's game of life
//  1  Any live cell with two or three live neighbours survives.
//  2  Any dead cell with three live neighbours becomes a live cell.
//  3  All other live cells die in the next generation. 
//     Similarly, all other dead cells stay dead.
//
GetNextGeneration()
BEGIN
  LOCAL MatSize;
  LOCAL BoardX;
  LOCAL BoardY;
  LOCAL NbrTlRow, NbrTlCol, NbrBrRow, NbrBrCol, Nbrs, NbrCount;
  LOCAL LiveCellCount;
  LOCAL CurrentCell;
  LOCAL BlankCheckSum; // Used when checking for a range of blank rows or columns when skipping for optimization
  LOCAL SubMatrixOpt; // When building a matrix to check to see if all zeros duing optimization

  MatSize := SIZE(CurrentGen);
  NextGen := MAKEMAT(0, MatSize(1), MatSize(2));
  // Simple for loop for now, will optimize later

  FOR BoardX FROM 1 TO MatSize(2) DO
    NbrTlCol := BoardX - 1;
    NbrBrCol := BoardX + 1;

    IF NbrTlCol == 0 THEN
      NbrTlCol := 1;
    END;
    IF NbrBrCol > MatSize(2) THEN
      NbrBrCol := MatSize(2);
    END;

    // Scan for a blank group of columns and skip them (optimization to speed up generation calculation, if they are all blank, they will stay blank)
    SubMatrixOpt  := CurrentGen({{1,NbrTlCol},{MatSize(1),NbrBrCol}});
    BlankCheckSum := ΣLIST(SubMatrixOpt);  
    IF BlankCheckSum > 0 THEN  
      FOR BoardY FROM 1 TO MatSize(1) DO
        NbrTlRow := BoardY - 1;
        NbrBrRow := BoardY + 1;
        

        // If we hit the edges in either direction, fix up 
        // references (assume outer cells are always off
        IF NbrTlRow == 0 THEN
          NbrTlRow := 1;
        END;

        IF NbrBrRow > MatSize(1) THEN
          NbrBrRow := MatSize(1);
        END;
        

        SubMatrixOpt  := CurrentGen({{NbrTlRow,1},{NbrBrRow, MatSize(2)}});
        BlankCheckSum := ΣLIST(SubMatrixOpt);  
        IF BlankCheckSum > 0 THEN  
          CurrentCell := CurrentGen(BoardY, BoardX);  

          //PRINT("TL Row " + NbrTlRow + " TL Col " + NbrTlCol + " BR Row " + NbrBrRow + " BR Col " + NbrBrCol);
          Nbrs := CurrentGen({{NbrTlRow,NbrTlCol},{NbrBrRow,NbrBrCol}});
          NbrCount := ΣLIST(Nbrs)-CurrentCell; 

          NextGen(BoardY, BoardX) := 0;  

          IF CurrentCell > 0 THEN
            IF (NbrCount == 2 OR NbrCount == 3) THEN 
              NextGen(BoardY, BoardX) := 1;  
            ELSE
              NextGen(BoardY, BoardX) := 0;  
            END;
          ELSE
            IF (NbrCount == 3) THEN
              NextGen(BoardY, BoardX) := 1;
            END;
          END;
        END;
      END;
    END;
  END;
  
  CurrentGen := NextGen;
  RETURN(0);
END;

/// MAIN
EXPORT GameOfLife()
BEGIN
   // Size of playing field (square matrix)
   LOCAL FieldSize;
   
   // Frame counter  
   LOCAL RenderFrame;

   //TODO load this from a user prompt
   INPUT(FieldSize,"Game board settings", "Edge length of square playing field", "", 50, 50); 
  
   LOCAL InitialPatternIdx;

   // Create both  current and next gen matrices as 0 matrices
   CurrentGen := MAKEMAT(0, FieldSize, FieldSize);
   NextGen := MAKEMAT(0, FieldSize, FieldSize);
   CHOOSE(InitialPatternIdx, "Choose an initial pattern", "r-pentomino", "glider", "glider block cycle");
  
   
   CASE 
     IF (InitialPatternIdx = 1) THEN LoadRPentomino(); END;
     IF (InitialPatternIdx = 2) THEN LoadGlider(); END;
     IF (InitialPatternIdx = 3) THEN LoadGliderBlockCycle();  END;
     DEFAULT RETURN(-1);
   END;
 
   

   STARTAPP("Function"); // Start function app. The next variables set are graphing app variables and do not exist for apps with no graphing capabilty.
   STARTVIEW(-1); // set home screen because STARTAPP opens the default view for the app
   RECT();
   
   FOR RenderFrame FROM 1 TO 50 DO
      RenderMatrix();
      GetNextGeneration();
     // WHILE GETKEY == -1 DO
        WAIT(0.10);
     // END;
   END;

   WAIT();
   RETURN(0);
END;
